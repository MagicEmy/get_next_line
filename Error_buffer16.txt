get_next_line cc -Wall -Wextra -Werror -D BUFFER_SIZE=16 get_next_line.c -g -fsanitize=address
➜  get_next_line ./a.out
step 1
step 2
=================================================================
==25065==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffee31448e8 at pc 0x00010cae1b12 bp 0x7ffee31448b0 sp 0x7ffee3144060
WRITE of size 16 at 0x7ffee31448e8 thread T0
    #0 0x10cae1b11 in wrap_read (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x1fb11)
    #1 0x10cabca8b in get_next_line get_next_line.c:48
    #2 0x10cabc7f1 in main get_next_line.c:22
    #3 0x7fff6a8b23d4 in start (libdyld.dylib:x86_64+0x163d4)

Address 0x7ffee31448e8 is located in stack of thread T0 at offset 40 in frame
    #0 0x10cabc81f in get_next_line get_next_line.c:28

  This frame has 1 object(s):
    [32, 40) 'buff_line' (line 30) <== Memory access at offset 40 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x1fb11) in wrap_read
Shadow bytes around the buggy address:
  0x1fffdc6288c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdc6288d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdc6288e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdc6288f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdc628900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x1fffdc628910: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00[f3]f3 f3
  0x1fffdc628920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdc628930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdc628940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdc628950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdc628960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==25065==ABORTING
[1]    25065 abort      ./a.out
➜  get_next_line 